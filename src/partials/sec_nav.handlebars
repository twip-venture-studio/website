<header id="header" class="pt-3 pb-5 lg:py-8 sticky top-0 z-50 bg-white">
    <div class="mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="relative flex justify-between">
            <div class="flex flex-wrap lg:flex-nowrap items-center w-full lg:gap-x-4">
                <a aria-label="Home" href="#" title="Home" class="grow min-w-[90px]">
                    <img src="/assets/img/twipLogo_brightBg.svg" alt="Twip Impact Ventures Logo" class="max-h-[42px] lg:max-h-[64px] max-w-[125px] lg:max-w-[190px] w-full"/>
                </a>
                <div class="grow"></div>
                {{#if minimalVer}}
                {{else}}
                <div class="lg:hidden flex">
                    <div data-headlessui-state="">
                        <button id="hamburger" class="relative z-10 flex h-8 w-8 items-center justify-center [&amp;:not(:focus-visible)]:focus:outline-none" aria-label="Toggle Navigation" type="button" aria-expanded="false" data-headlessui-state="">
                            <span class="sr-only">Open menu</span>
                            <svg class="toggle block h-8 w-8 fill-secondary" viewBox="0 0 32 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="16" y="16" width="16" height="4" rx="1"/>
                                <rect y="8" width="32" height="4" rx="1"/>
                                <rect x="8" width="24" height="4" rx="1"/>
                            </svg>
                            <svg class="toggle hidden h-8 w-8 stroke-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div id="menuItems" class="toggle hidden w-full lg:w-auto text-center text-2xl text-white lg:text-secondary font-extrabold lg:text-base lg:flex mt-3 lg:mt-0 lg:gap-x-4">
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="Mission" href="/#mission">Mission</a>
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="Investment" href="/#investment">Investment</a>
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="Process" href="/#process">Process</a>
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="Cases" href="/#cases">Cases</a>
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="Team" href="/#team">Team</a>
                    <a class="block lg:inline-block py-3 lg:py-1 px-2" title="FAQ" href="/#faq">FAQ</a>
                </div>
                <div class="toggle hidden lg:flex w-full lg:w-auto text-center mt-9 lg:mt-0">
                    <a class="lg:inline-block rounded-xl py-2 px-6 text-secondary bg-tertiary font-extrabold shadow shadow-tertiary/40 transition transition-200 ease-linear hover:scale-105 hover:brightness-90 hover:shadow-hover hover:shadow-tertiary/60" target="_blank"  title="Drop your Pitchdeck" href="/droppitchdeck.html">
                        Pitch your deck!
                    </a>
                </div>
                {{/if}}
            </div>
        </nav>
    </div>
</header>

<script>
    //change Icon when Menu is opened
    function toggleMenu() {
        document.getElementById("header").classList.toggle("opened");
        const navToggle = document.getElementsByClassName("toggle");
        for (let i = 0; i < navToggle.length; i++) {
            navToggle.item(i).classList.toggle("hidden");
        }
    }
    document.getElementById("hamburger").onclick = () => { toggleMenu();};

    //close Menu when Element is clicked
    document.querySelector("#menuItems").onclick = () => {
        if (document.getElementById("header").classList.contains("opened")) {
            toggleMenu();
        }
    };


    // add data-scroll="0" to html element
    const debounce = (fn) => {
        let frame;
        return (...params) => {
            if (frame) { 
            cancelAnimationFrame(frame);
            }
            frame = requestAnimationFrame(() => {
            fn(...params);
            });
        } 
    };
    const storeScroll = () => {
        document.documentElement.dataset.scroll = window.scrollY;
    }
    document.addEventListener('scroll', debounce(storeScroll), { passive: true });
    storeScroll();

    //highlight current nav element
    window.addEventListener("scroll", navHighlighter);
    function navHighlighter() {
        let sections = document.querySelectorAll("section:has(span.sectionMarker)");
        let scrollY = window.pageYOffset;
        sections.forEach(current => {
            const sectionHeight = current.offsetHeight;
            const sectionTop = current.offsetTop - 120;
            sectionId = current.querySelector("span.sectionMarker").getAttribute("id");
            if (
                scrollY > sectionTop &&
                scrollY <= sectionTop + sectionHeight
            ){
                document.querySelector("#menuItems a[href*=" + sectionId + "]").classList.add("active");
            } else {
                document.querySelector("#menuItems a[href*=" + sectionId + "]").classList.remove("active");
            }
        });
    }
</script>